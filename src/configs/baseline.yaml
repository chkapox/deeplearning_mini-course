defaults:
  - model: baseline
  - writer: wandb
  - metrics: example
  - datasets: example
  - dataloader: example
  - transforms: example
  - _self_
optimizer:
  _target_: torch.optim.AdamW
  lr: 1e-4
  weight_decay: 1e-4
lr_scheduler:
  _target_: torch.optim.lr_scheduler.StepLR
  gamma: 0.98
  step_size: ${trainer.epoch_len}
loss_function:
  _target_: src.loss.ExampleLoss
  weight: [1.0, 5.0]        # [spoof, bonafide] ‚Äî –µ—Å–ª–∏ –∑–Ω–∞–µ–º –¥–∏—Å–±–∞–ª–∞–Ω—Å; –ø–æ–ø—Ä–∞–≤–∏–º –ø–æ–∑–∂–µ
  label_smoothing: 0.1
trainer:
  monitor: "min val_EER"
  log_step: 50
  n_epochs: 15
  epoch_len: 600
  device_tensors: ["data_object", "labels"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: False # if True, will override the previous run with the same name
  # monitor: "max test_MulticlassAccuracy" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 3 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "Q://deeplearn"
  seed: 1
# dataloader:
#   _target_: torch.utils.data.DataLoader
#   batch_size: 32
#   num_workers: 2
#   pin_memory: true
#   prefetch_factor: 2        # üëà –¥–æ–±–∞–≤—å –≤–æ—Ç —ç—Ç–æ
#   persistent_workers: true  # –∏ —ç—Ç–æ, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
#   collate_fn:
#     _target_: src.datasets.collate.collate_fn
#     _partial_: true
